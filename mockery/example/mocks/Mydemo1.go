// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	demo1 "mockerydemo/example"

	mock "github.com/stretchr/testify/mock"
)

// Mydemo1 is an autogenerated mock type for the Mydemo1 type
type Mydemo1 struct {
	mock.Mock
}

type Mydemo1_Expecter struct {
	mock *mock.Mock
}

func (_m *Mydemo1) EXPECT() *Mydemo1_Expecter {
	return &Mydemo1_Expecter{mock: &_m.Mock}
}

// DemoFunc1 provides a mock function with given fields:
func (_m *Mydemo1) DemoFunc1() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Mydemo1_DemoFunc1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemoFunc1'
type Mydemo1_DemoFunc1_Call struct {
	*mock.Call
}

// DemoFunc1 is a helper method to define mock.On call
func (_e *Mydemo1_Expecter) DemoFunc1() *Mydemo1_DemoFunc1_Call {
	return &Mydemo1_DemoFunc1_Call{Call: _e.mock.On("DemoFunc1")}
}

func (_c *Mydemo1_DemoFunc1_Call) Run(run func()) *Mydemo1_DemoFunc1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mydemo1_DemoFunc1_Call) Return(_a0 string) *Mydemo1_DemoFunc1_Call {
	_c.Call.Return(_a0)
	return _c
}

// DemoFunc2 provides a mock function with given fields: p
func (_m *Mydemo1) DemoFunc2(p demo1.Person) string {
	ret := _m.Called(p)

	var r0 string
	if rf, ok := ret.Get(0).(func(demo1.Person) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Mydemo1_DemoFunc2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemoFunc2'
type Mydemo1_DemoFunc2_Call struct {
	*mock.Call
}

// DemoFunc2 is a helper method to define mock.On call
//   - p demo1.Person
func (_e *Mydemo1_Expecter) DemoFunc2(p interface{}) *Mydemo1_DemoFunc2_Call {
	return &Mydemo1_DemoFunc2_Call{Call: _e.mock.On("DemoFunc2", p)}
}

func (_c *Mydemo1_DemoFunc2_Call) Run(run func(p demo1.Person)) *Mydemo1_DemoFunc2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(demo1.Person))
	})
	return _c
}

func (_c *Mydemo1_DemoFunc2_Call) Return(_a0 string) *Mydemo1_DemoFunc2_Call {
	_c.Call.Return(_a0)
	return _c
}

// DemoFunc3 provides a mock function with given fields: p
func (_m *Mydemo1) DemoFunc3(p *demo1.Person) string {
	ret := _m.Called(p)

	var r0 string
	if rf, ok := ret.Get(0).(func(*demo1.Person) string); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Mydemo1_DemoFunc3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemoFunc3'
type Mydemo1_DemoFunc3_Call struct {
	*mock.Call
}

// DemoFunc3 is a helper method to define mock.On call
//   - p *demo1.Person
func (_e *Mydemo1_Expecter) DemoFunc3(p interface{}) *Mydemo1_DemoFunc3_Call {
	return &Mydemo1_DemoFunc3_Call{Call: _e.mock.On("DemoFunc3", p)}
}

func (_c *Mydemo1_DemoFunc3_Call) Run(run func(p *demo1.Person)) *Mydemo1_DemoFunc3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*demo1.Person))
	})
	return _c
}

func (_c *Mydemo1_DemoFunc3_Call) Return(_a0 string) *Mydemo1_DemoFunc3_Call {
	_c.Call.Return(_a0)
	return _c
}

// DemoFunc4 provides a mock function with given fields: p
func (_m *Mydemo1) DemoFunc4(p *demo1.Person) (error, string) {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(*demo1.Person) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*demo1.Person) string); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// Mydemo1_DemoFunc4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DemoFunc4'
type Mydemo1_DemoFunc4_Call struct {
	*mock.Call
}

// DemoFunc4 is a helper method to define mock.On call
//   - p *demo1.Person
func (_e *Mydemo1_Expecter) DemoFunc4(p interface{}) *Mydemo1_DemoFunc4_Call {
	return &Mydemo1_DemoFunc4_Call{Call: _e.mock.On("DemoFunc4", p)}
}

func (_c *Mydemo1_DemoFunc4_Call) Run(run func(p *demo1.Person)) *Mydemo1_DemoFunc4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*demo1.Person))
	})
	return _c
}

func (_c *Mydemo1_DemoFunc4_Call) Return(_a0 error, _a1 string) *Mydemo1_DemoFunc4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewMydemo1 interface {
	mock.TestingT
	Cleanup(func())
}

// NewMydemo1 creates a new instance of Mydemo1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMydemo1(t mockConstructorTestingTNewMydemo1) *Mydemo1 {
	mock := &Mydemo1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
